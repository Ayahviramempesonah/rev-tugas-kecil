generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Account{
id  String @id @default(cuid())
userId String
provider String
providerAccountId String
refresh_token String? @db.Text
access_token String? @db.Text
expires_at Int?
token_type String?
scope String?
id_token String? @db.Text
session_state String?
user User @relation(fields:[userId],references:[id],onDelete:Cascade) 

@@unique([provider,providerAccountId])
}



model Session{
    id String @id @default(cuid())
    sesionToken String  @unique
    userId String
    expires DateTime
    user User @relation(fields:[userId],references:[id],onDelete: Cascade)

  }

model User {
id String @id @default(cuid())
name String?
email String? @unique
password String?
image String?
accounts Account[]
session Session[]
stories Story[]


  }

model VerificationToken{
    identifier String
    token String @unique
    expires DateTime
    @@unique([identifier,token])
  }





model Author {
  @@map("authors")

  id        Int      @id @default(autoincrement())
  name      String
  bio       String?
  createdAt DateTime @default(now()) @map("created_at")
  books     Book[]
}

model Book {
  @@map("books")

  id        Int      @id @default(autoincrement())
  title     String
  authorId  Int      @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  author    Author   @relation(fields: [authorId], references: [id])
}

model Story{
    id String @id @default(cuid())
    title String
    description String @db.Text
    imageUrl String 
    createdAt DateTime @default(now())

    authorId String
    author User @relation(fields:[authorId],references:[id],onDelete:Cascade)
  }
